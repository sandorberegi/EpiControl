[{"path":"https://sandorberegi.github.io/EpiControl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 EpiControl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_MPC.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Simulating Epidemic Dynamics with Policy Interventions","text":"vignette demonstrates model predictive optimal control ICU cases COVID-19","code":""},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_MPC.html","id":"load-libraries-and-setup","dir":"Articles","previous_headings":"Overview","what":"Load Libraries and Setup","title":"Simulating Epidemic Dynamics with Policy Interventions","text":"Load required libraries initialize simulation environment. Initialize cluster parallel computing:","code":"library(EpiControl) library(VGAM) ## Loading required package: stats4 ## Loading required package: splines library(parallel) library(pbapply) library(zoo)  # For rolling sum operations ##  ## Attaching package: 'zoo' ## The following objects are masked from 'package:base': ##  ##     as.Date, as.Date.numeric library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(ggplot2) set.seed(1) cores <- detectCores() - 1 cl <- makeCluster(cores)  clusterSetRNGStream(cl, iseed = 20250501)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_MPC.html","id":"epidemiological-and-noise-parameters","dir":"Articles","previous_headings":"Overview","what":"Epidemiological and Noise Parameters","title":"Simulating Epidemic Dynamics with Policy Interventions","text":"Define parameters pathogens noise: Can include different pathogens, case consider COVID-19 Ebola virus.","code":"Epi_pars <- data.frame(   Pathogen = c(\"COVID-19\", \"Ebola\"),   R0 = c(2.2, 2.5),   gen_time = c(6.5, 15.0),   gen_time_var = c(2.1, 2.1),   CFR = c(0.0132, 0.5),   mortality_mean = c(10.0, 10.0),   mortality_var = c(1.1, 1.1) )  Noise_pars <- data.frame(   repd_mean = 10.5,  # Reporting delay mean   del_disp = 5.0,    # Reporting delay variance   ur_mean = 0.3,     # Under-reporting mean   ur_beta_a = 50.0   # Beta distribution alpha for under-reporting )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_MPC.html","id":"action-space-for-policy-interventions","dir":"Articles","previous_headings":"Overview","what":"Action Space for Policy Interventions","title":"Simulating Epidemic Dynamics with Policy Interventions","text":"Define non-pharmaceutical interventions: 2 actions, introducing “lockdown” interventions.","code":"Action_space <- data.frame(   NPI = c(\"No restrictions\", \"Lockdown\"),   R_coeff = c(1.0, 0.3),   R_beta_a = c(0.0, 5.0),   cost_of_NPI = c(0.0, 0.15) )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_MPC.html","id":"simulation-setup","dir":"Articles","previous_headings":"Overview","what":"Simulation Setup","title":"Simulating Epidemic Dynamics with Policy Interventions","text":"Set key parameters initialize simulation data:","code":"C_target <- 1 D_target <- 12 r_trans_len <- 7  sim_settings <- list(   ndays = 83 * 7, #simulation length   start_day = 1,   N = 1e7, # population size   I0 = 10, # initial infections   C_target = C_target, #target cases   C_target_pen = C_target*1.5, #overshoot penalty threshold   R_target = 1.0,   D_target = D_target, #one way to get peaks at 400 is to increase this to 15   D_target_pen = 50, #max death   alpha = 0*1.3/C_target, #~proportional gain (regulates error in cases) covid   #alpha = 3.25/C_target #~proportional gain (regulates error in cases) ebola   alpha_d = 1.3/D_target,   ovp = 0*5.0, #overshoot penalty   dovp = 10.0, #death overshoot penalty   gamma = 0.95, #discounting factor   n_ens = 10L, #MC assembly size for 4   sim_ens = 20L, #assembly size for full simulation   rf = 21L, #days 14   R_est_wind = 5L, #rf-2 #window for R estimation   pred_days = 28L,   r_trans_steep = 1.5,  # Growth rate   r_trans_len = r_trans_len,  # Number of days for the transition   t0 = r_trans_len  / 2, # Midpoint of the transition   pathogen = 1,   susceptibles = 0,   delay = 0,   ur = 0,   r_dir = 2 )  column_names <- c(\"days\", \"sim_id\", \"I\", \"Lambda\", \"C\", \"Lambda_C\", \"S\", \"Deaths\", \"Re\", \"Rew\", \"Rest\", \"R0est\", \"policy\", \"R_coeff\") episim_data <- data.frame(matrix(0, nrow = (sim_settings$ndays), ncol = length(column_names))) colnames(episim_data) <- column_names  episim_data$policy <- rep(1, sim_settings$ndays) episim_data$days <- 1:(sim_settings$ndays) episim_data[1, ] <- c(1, 1, sim_settings$I0, sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, sim_settings$N - sim_settings$I0, 0, Epi_pars[1, \"R0\"], Epi_pars[1, \"R0\"], 1, 1, 1, 1)  episim_data_ens <- replicate(sim_settings$sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_settings$sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, sim_settings$ndays) }"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_MPC.html","id":"running-the-simulation","dir":"Articles","previous_headings":"Overview","what":"Running the Simulation","title":"Simulating Epidemic Dynamics with Policy Interventions","text":"Run simulations parallel using pblapply function:","code":"episettings <- list(   sim_function = Epi_MPC_run_wd,   reward_function = reward_fun_wd,   R_estimator = R_estim,   noise_par = Noise_pars,   epi_par = Epi_pars,   actions = Action_space,   sim_settings = sim_settings,   parallel = TRUE )  episettings$cl <- cl  results <- epicontrol(episim_data_ens, episettings) ## [1] 0 ##   |                                                          |                                                  |   0% episim_data_ens <- results stopCluster(cl)  #for (jj in 1:sim_ens) { #  episim_data_ens[[jj]] <- Epi_MPC_run_wd(episim_data_ens[[jj]], Epi_pars, Noise_pars, Action_space, pred_days = pred_days, n_ens = n_ens, ndays = nrow(episim_data), R_est_wind = R_est_wind, pathogen = 1, susceptibles = 0, delay = 0, ur = 0, r_dir = 2, N = N) #  setTxtProgressBar(pb,jj) #} #close(pb)  for (jj in 1:sim_settings$sim_ens) {   episim_data_ens[[jj]] <- head(episim_data_ens[[jj]], -sim_settings$pred_days)   episim_data_ens[[jj]][\"D_roll\"] <- rollsum(episim_data_ens[[jj]][\"Deaths\"], 7, fill = NA)   episim_data_ens[[jj]][\"I_roll\"] <- rollsum(episim_data_ens[[jj]][\"I\"], 7, fill = NA)   episim_data_ens[[jj]][\"D_cum\"] <- cumsum(episim_data_ens[[jj]][\"Deaths\"])   episim_data_ens[[jj]][\"I_cum\"] <- cumsum(episim_data_ens[[jj]][\"I\"]) }  # Combine Simulation Results combined_data <- do.call(rbind, episim_data_ens)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_MPC.html","id":"plotting-results","dir":"Articles","previous_headings":"Overview","what":"Plotting results","title":"Simulating Epidemic Dynamics with Policy Interventions","text":"","code":"combined_data <- combined_data %>%   group_by(sim_id, policy) %>%   arrange(days) %>%   mutate(group = cumsum(c(1, diff(days) != 1))) %>%   ungroup()  combined_data <- combined_data %>%   arrange(sim_id, days, policy)  policy_labels <- c(\"1\" = \"No intervention\", \"2\" = \"Lockdown\")   ggplot(combined_data %>% filter(sim_id == 1)) +   geom_line(data = subset(combined_data, sim_id != 1), aes(x = days, y = D_roll, color = as.factor(sim_id)), alpha = 0.1) +   geom_line(aes(x = days, y = D_roll, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0) +   geom_line(aes(x = days, y = D_roll, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0, linewidth=0.25) +   geom_hline(yintercept = 7*D_target, linetype = \"dashed\", color = \"blue\", linewidth=0.25) +   labs(x = \"Days\", y = \"Reported cases (rolling weekly\", color = \"Policy\") +   scale_color_manual(values = c(\"No intervention\" = \"chartreuse3\", \"Lockdown\" = \"red\")) +   guides(color = guide_legend(title = \"Policy\")) +   scale_y_continuous(     name = \"ICU cases\",     sec.axis = sec_axis(~./100, name = \"R\")   ) +   geom_line(data = subset(combined_data, sim_id == 1), aes(x = days, y = 100*Re), color = \"darkred\", linewidth=0.25, alpha = 1.0)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_threshold_based.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Report9_threshold_based","text":"vignette demonstrates threshold-based control ICU cases COVID-19","code":""},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_threshold_based.html","id":"load-libraries-and-setup","dir":"Articles","previous_headings":"Overview","what":"Load Libraries and Setup","title":"Report9_threshold_based","text":"Load required libraries initialize simulation environment. Initialize cluster parallel computing:","code":"library(EpiControl) library(VGAM) #> Loading required package: stats4 #> Loading required package: splines library(parallel) library(pbapply) library(zoo)  # For rolling sum operations #>  #> Attaching package: 'zoo' #> The following objects are masked from 'package:base': #>  #>     as.Date, as.Date.numeric library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) set.seed(1) cores <- detectCores() - 1 cl <- makeCluster(cores)  clusterSetRNGStream(cl, iseed = 20250501)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_threshold_based.html","id":"epidemiological-and-noise-parameters","dir":"Articles","previous_headings":"Overview","what":"Epidemiological and Noise Parameters","title":"Report9_threshold_based","text":"Define parameters pathogens noise: Can include different pathogens, case consider COVID-19 Ebola virus.","code":"Epi_pars <- data.frame(   Pathogen = c(\"COVID-19\", \"Ebola\"),   R0 = c(2.2, 2.5),   gen_time = c(6.5, 15.0),   gen_time_var = c(2.1, 2.1),   CFR = c(0.0132, 0.5),   mortality_mean = c(10.0, 10.0),   mortality_var = c(1.1, 1.1) )  Noise_pars <- data.frame(   repd_mean = 10.5,  # Reporting delay mean   del_disp = 5.0,    # Reporting delay variance   ur_mean = 0.3,     # Under-reporting mean   ur_beta_a = 50.0   # Beta distribution alpha for under-reporting )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_threshold_based.html","id":"action-space-for-policy-interventions","dir":"Articles","previous_headings":"Overview","what":"Action Space for Policy Interventions","title":"Report9_threshold_based","text":"Define non-pharmaceutical interventions: 2 actions, introducing “lockdown” interventions.","code":"Action_space <- data.frame(   NPI = c(\"No restrictions\", \"Lockdown\"),   R_coeff = c(1.0, 0.3),   R_beta_a = c(0.0, 5.0),   cost_of_NPI = c(0.0, 0.15) )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_threshold_based.html","id":"simulation-setup","dir":"Articles","previous_headings":"Overview","what":"Simulation Setup","title":"Report9_threshold_based","text":"Set key parameters initialize simulation data:","code":"r_trans_len <- 7  sim_settings <- list(   ndays = 83 * 7, #simulation length   start_day = 1,   N = 1e7, # population size   I0 = 10, # initial infections   sim_ens = 20L, #assembly size for full simulation   rf = 1L, #days 14   R_est_wind = 5L, #rf-2 #window for R estimation   r_trans_steep = 1.5,  # Growth rate   r_trans_len = r_trans_len,  # Number of days for the transition   t0 = r_trans_len  / 2, # Midpoint of the transition   pathogen = 1,   susceptibles = 0,   delay = 0,   ur = 0,   r_dir = 2,   LD_on = 14,   LD_off = 7 )  column_names <- c(\"days\", \"sim_id\", \"I\", \"Lambda\", \"C\", \"Lambda_C\", \"S\", \"Deaths\", \"Re\", \"Rew\", \"Rest\", \"R0est\", \"policy\", \"R_coeff\") episim_data <- data.frame(matrix(0, nrow = (sim_settings$ndays), ncol = length(column_names))) colnames(episim_data) <- column_names  episim_data$policy <- rep(1, sim_settings$ndays) episim_data$days <- 1:(sim_settings$ndays) episim_data[1, ] <- c(1, 1, sim_settings$I0, sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, sim_settings$N - sim_settings$I0, 0, Epi_pars[1, \"R0\"], Epi_pars[1, \"R0\"], 1, 1, 1, 1)  episim_data_ens <- replicate(sim_settings$sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_settings$sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, sim_settings$ndays) }"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_threshold_based.html","id":"running-the-simulation","dir":"Articles","previous_headings":"Overview","what":"Running the Simulation","title":"Report9_threshold_based","text":"Run simulations parallel using pblapply function:","code":"episettings <- list(   sim_function = Epi_MPC_run_wd_thr,   R_estimator = R_estim,   noise_par = Noise_pars,   epi_par = Epi_pars,   actions = Action_space,   sim_settings = sim_settings,   parallel = TRUE )  episettings$cl <- cl  results <- epicontrol(episim_data_ens, episettings) #> [1] 0 #>   |                                                          |                                                  |   0%  episim_data_ens <- results stopCluster(cl)  #for (jj in 1:sim_ens) { #  episim_data_ens[[jj]] <- Epi_MPC_run_wd(episim_data_ens[[jj]], Epi_pars, Noise_pars, Action_space, pred_days = pred_days, n_ens = n_ens, ndays = nrow(episim_data), R_est_wind = R_est_wind, pathogen = 1, susceptibles = 0, delay = 0, ur = 0, r_dir = 2, N = N) #  setTxtProgressBar(pb,jj) #} #close(pb)  for (jj in 1:sim_settings$sim_ens) {   episim_data_ens[[jj]][\"D_roll\"] <- rollsum(episim_data_ens[[jj]][\"Deaths\"], 7, fill = NA)   episim_data_ens[[jj]][\"I_roll\"] <- rollsum(episim_data_ens[[jj]][\"I\"], 7, fill = NA)   episim_data_ens[[jj]][\"D_cum\"] <- cumsum(episim_data_ens[[jj]][\"Deaths\"])   episim_data_ens[[jj]][\"I_cum\"] <- cumsum(episim_data_ens[[jj]][\"I\"]) }  # Combine Simulation Results combined_data <- do.call(rbind, episim_data_ens)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/Report9_threshold_based.html","id":"plotting-results","dir":"Articles","previous_headings":"Overview","what":"Plotting results","title":"Report9_threshold_based","text":"","code":"combined_data <- combined_data %>%   group_by(sim_id, policy) %>%   arrange(days) %>%   mutate(group = cumsum(c(1, diff(days) != 1))) %>%   ungroup()  combined_data <- combined_data %>%   arrange(sim_id, days, policy)  policy_labels <- c(\"1\" = \"No intervention\", \"2\" = \"Lockdown\")   # Plotting the data ggplot(combined_data %>% filter(sim_id == 1)) +   geom_line(data = subset(combined_data, sim_id != 1), aes(x = days, y = D_roll, color = as.factor(sim_id)), alpha = 0.1) +   geom_line(aes(x = days, y = D_roll, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0) +   geom_line(aes(x = days, y = D_roll, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0, size=0.25) +   geom_hline(yintercept = 7*sim_settings$LD_on, linetype = \"dashed\", color = \"blue\", size=0.25) +   geom_hline(yintercept = 7*sim_settings$LD_off, linetype = \"dashed\", color = \"purple\", size=0.25) +   labs(x = \"Days\", y = \"Reported cases (rolling weekly\", color = \"Policy\") +   scale_color_manual(values = c(\"No intervention\" = \"chartreuse3\", \"Lockdown\" = \"red\")) +   guides(color = guide_legend(title = \"Policy\")) +   scale_y_continuous(     name = \"ICU cases (weekly, rolling)\",     sec.axis = sec_axis(~./100, name = \"R\")   ) +   geom_line(data = subset(combined_data, sim_id == 1), aes(x = days, y = 100*Re), color = \"darkred\", size=0.25, alpha = 1.0)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/control_est_D.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"MPC with death data only","text":"vignette demonstrates model predictive optimal control deaths COVID-19 based death data ","code":""},{"path":"https://sandorberegi.github.io/EpiControl/articles/control_est_D.html","id":"load-libraries-and-setup","dir":"Articles","previous_headings":"Overview","what":"Load Libraries and Setup","title":"MPC with death data only","text":"Load required libraries initialize simulation environment. Initialize cluster parallel computing:","code":"library(EpiControl) library(VGAM) ## Loading required package: stats4 ## Loading required package: splines library(parallel) library(pbapply) library(zoo)  # For rolling sum operations ##  ## Attaching package: 'zoo' ## The following objects are masked from 'package:base': ##  ##     as.Date, as.Date.numeric library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(ggplot2) set.seed(1) cores <- detectCores() - 1 cl <- makeCluster(cores)  clusterSetRNGStream(cl, iseed = 20250501)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/control_est_D.html","id":"epidemiological-and-noise-parameters","dir":"Articles","previous_headings":"Overview","what":"Epidemiological and Noise Parameters","title":"MPC with death data only","text":"Define parameters pathogens noise: Can include different pathogens, case consider COVID-19 Ebola virus.","code":"Epi_pars <- data.frame(   Pathogen = c(\"COVID-19\", \"Ebola\"),   R0 = c(2.2, 2.5),   gen_time = c(6.5, 15.0),   gen_time_var = c(2.1, 2.1),   CFR = c(0.0132, 0.5),   mortality_mean = c(10.0, 10.0),   mortality_var = c(1.1, 1.1) )  Noise_pars <- data.frame (   repd_mean = 14.5, #Reporting delay mean 10.5   del_disp = 1.1, #Reporting delay variance 5.0   ur_mean = 0.3, #Under reporting, mean/variance   ur_beta_a = 50.0 )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/control_est_D.html","id":"action-space-for-policy-interventions","dir":"Articles","previous_headings":"Overview","what":"Action Space for Policy Interventions","title":"MPC with death data only","text":"Define non-pharmaceutical interventions: 2 actions, introducing “lockdown” interventions.","code":"Action_space <- data.frame (   NPI = c(\"No restrictions\", \"Social distancing\", \"Lockdown\"),   R_coeff = c(1.0, 0.5, 0.2), #R0_act = R0 * ctrl_states   R_beta_a = c(0.0, 5.0, 5.0), #R0_act uncertainty   cost_of_NPI = c(0.0, 0.01, 0.15) )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/control_est_D.html","id":"simulation-setup","dir":"Articles","previous_headings":"Overview","what":"Simulation Setup","title":"MPC with death data only","text":"Set key parameters initialize simulation data:","code":"C_target <- 200 D_target <- 100 r_trans_len <- 7  sim_settings <- list(   ndays = 61 * 7, #simulation length   start_day = 1,   N = 1e7, # population size   I0 = 10, # initial infections   C_target = C_target, #target cases   C_target_pen = C_target*1.5, #overshoot penalty threshold   R_target = 1.0,   D_target = D_target, #one way to get peaks at 400 is to increase this to 15   D_target_pen = 300, #max death   #alpha = 0*1.3/C_target, #~proportional gain (regulates error in cases) covid   alpha = 0*3.25/C_target, #~proportional gain (regulates error in cases) ebola   alpha_d = 3.25/D_target,   ovp = 0*5.0, #overshoot penalty   dovp = 5.0, #death overshoot penalty   gamma = 0.95, #discounting factor   n_ens = 10L, #MC assembly size for 4   sim_ens = 20L, #assembly size for full simulation   rf = 21L, #days 14   R_est_wind = 5L, #rf-2 #window for R estimation   pred_days = 28L,   r_trans_steep = 1.5,  # Growth rate   r_trans_len = r_trans_len,  # Number of days for the transition   t0 = r_trans_len  / 2, # Midpoint of the transition   pathogen = 2,   susceptibles = 0,   delay = 0,   ur = 0,   r_dir = 2 )  column_names <- c(\"days\", \"sim_id\", \"I\", \"Lambda\", \"C\", \"Lambda_C\", \"S\", \"Deaths\", \"Re\", \"Rew\", \"Rest\", \"R0est\", \"policy\", \"R_coeff\") episim_data <- data.frame(matrix(0, nrow = (sim_settings$ndays), ncol = length(column_names))) colnames(episim_data) <- column_names  episim_data$policy <- rep(1, sim_settings$ndays) episim_data$days <- 1:(sim_settings$ndays) episim_data[1, ] <- c(1, 1, sim_settings$I0, sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, sim_settings$N - sim_settings$I0, 0, Epi_pars[1, \"R0\"], Epi_pars[1, \"R0\"], 1, 1, 1, 1)  episim_data_ens <- replicate(sim_settings$sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_settings$sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, sim_settings$ndays) }"},{"path":"https://sandorberegi.github.io/EpiControl/articles/control_est_D.html","id":"running-the-simulation","dir":"Articles","previous_headings":"Overview","what":"Running the Simulation","title":"MPC with death data only","text":"Run simulations parallel using pblapply function:","code":"episettings <- list(   sim_function = Epi_MPC_run_wd,   reward_function = reward_fun_wd,   R_estimator = R_estim,   noise_par = Noise_pars,   epi_par = Epi_pars,   actions = Action_space,   sim_settings = sim_settings,   parallel = TRUE )   clusterExport(cl, ls())  parallel::clusterEvalQ(cl, {   library(pbapply)   library(VGAM)   library(EpiControl) }) ## [[1]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[2]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[3]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[4]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[5]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[6]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[7]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[8]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[9]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[10]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\"       ##  ## [[11]] ##  [1] \"EpiControl\" \"VGAM\"       \"splines\"    \"stats4\"     \"pbapply\"    ##  [6] \"stats\"      \"graphics\"   \"grDevices\"  \"utils\"      \"datasets\"   ## [11] \"methods\"    \"base\" # Add the cluster object to your settings episettings$cl <- cl  results <- epicontrol(episim_data_ens, episettings) ## [1] 0 ##   |                                                          |                                                  |   0% episim_data_ens <- results stopCluster(cl)  #for (jj in 1:sim_ens) { #  episim_data_ens[[jj]] <- Epi_MPC_run_wd(episim_data_ens[[jj]], Epi_pars, Noise_pars, Action_space, pred_days = pred_days, n_ens = n_ens, ndays = nrow(episim_data), R_est_wind = R_est_wind, pathogen = 1, susceptibles = 0, delay = 0, ur = 0, r_dir = 2, N = N) #  setTxtProgressBar(pb,jj) #} #close(pb)  for (jj in 1:sim_settings$sim_ens) {   episim_data_ens[[jj]] <- head(episim_data_ens[[jj]], -sim_settings$pred_days)   episim_data_ens[[jj]][\"D_roll\"] <- rollsum(episim_data_ens[[jj]][\"Deaths\"], 7, fill = NA)   episim_data_ens[[jj]][\"I_roll\"] <- rollsum(episim_data_ens[[jj]][\"I\"], 7, fill = NA)   episim_data_ens[[jj]][\"D_cum\"] <- cumsum(episim_data_ens[[jj]][\"Deaths\"])   episim_data_ens[[jj]][\"I_cum\"] <- cumsum(episim_data_ens[[jj]][\"I\"]) }  # Combine Simulation Results combined_data <- do.call(rbind, episim_data_ens)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/control_est_D.html","id":"plotting-results","dir":"Articles","previous_headings":"Overview","what":"Plotting results","title":"MPC with death data only","text":"","code":"combined_data <- combined_data %>%   group_by(sim_id, policy) %>%   arrange(days) %>%   mutate(group = cumsum(c(1, diff(days) != 1))) %>%   ungroup()  combined_data <- combined_data %>%   arrange(sim_id, days, policy)  policy_labels <- c(\"1\" = \"No intervention\", \"2\" = \"Lockdown\")  cls <- rep(\"grey\", sim_settings$sim_ens) cls[1] <- \"red\"  ggplot() +   geom_line(data = subset(combined_data, sim_id != 1), aes(x = days, y = Deaths, color = as.factor(sim_id)), alpha = 0.3) +   geom_line(data = subset(combined_data, sim_id == 1), aes(x = days, y = Deaths), color = \"darkred\", alpha = 1.0) +   labs(x = \"Days\", y = \"Deaths\") +   scale_color_manual(values = cls) +   geom_hline(yintercept = D_target, linetype = \"dashed\", color = \"purple\", size=0.25)+   guides(color = FALSE)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/epiestim_ebola.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"Data preprocessing","title":"Ebola example - using EpiEstim for estimation","text":"first load dataset containing cases West African Ebola. Garske, T. et al. Heterogeneities case fatality ratio West African Ebola outbreak 2013–2016. Philos. Trans. R. Soc. Lond. B Biol. Sci. 372, 20160308 2017. link  Let’s estimate R data using EpiEstim.","code":"# Read data ebola_data <- read_csv(\"ebola_data/rstb20160308_si_001.csv\")  # Extract and convert date column date_reported <- as.Date(ebola_data$DateReport)  # Ensure it's in Date format date_inferred <- as.Date(ebola_data$DateOnsetInferred)  # Create a sequence of all dates from min to max all_dates <- data.frame(date_reported = seq(min(date_reported, na.rm = TRUE),                                             max(date_reported, na.rm = TRUE),                                             by = \"day\"))  # Count occurrences of each reported date date_counts <- as.data.frame(table(date_reported, useNA = \"no\")) date_counts_i <- as.data.frame(table(date_inferred, useNA = \"no\"))  colnames(date_counts) <- c(\"date_reported\", \"count\") colnames(date_counts_i) <- c(\"date_reported\", \"count\") date_counts$date_reported <- as.Date(date_counts$date_reported) date_counts_i$date_reported <- as.Date(date_counts_i$date_reported)# Convert back to Date format  # Merge full date range with counts, filling missing dates with 0 date_counts_filled <- all_dates %>%   left_join(date_counts, by = \"date_reported\") %>%   replace_na(list(count = 0))  date_counts_i_filled <- all_dates %>%   left_join(date_counts_i, by = \"date_reported\") %>%   replace_na(list(count = 0))  date_counts_filled$count_i <- date_counts_i_filled$count  # Visualise daily epidemic cases curves (when reported and as occurence inferred)  ggplot(date_counts_filled, aes(x = date_reported, y = count)) +   geom_line(color = \"blue\") +  # Line plot for cases over time   geom_line(color = \"red\", aes(x = date_reported, y = count_i)) +   labs(title = \"Ebola Cases Over Time\",        x = \"Date\",        y = \"Number of Cases\") +   theme_minimal() cases_v <- date_counts_filled$count_i  ndays <- 833#epidemic length #simulation length  # Assumed generation time distribution Ygen <- dgamma(1:ndays, 15.0/2.1, 1/2.1) Ygen <- Ygen/sum(Ygen) Ygen <- c(0, Ygen)  res <- estimate_R(incid = cases_v,                   method = \"non_parametric_si\",                   config = make_config(si_distr = Ygen))   plot(res)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/epiestim_ebola.html","id":"simulation-setup","dir":"Articles","previous_headings":"","what":"Simulation setup","title":"Ebola example - using EpiEstim for estimation","text":"simulate controlled epidemic starting day 210 first case. set control target 50 cases/day. model susceptible depletion infected individuals getting removed susceptible group. expect control balance cases around target herd immunity reached interventions applied. Initialise cluster parallel computing:","code":"cores <- detectCores() - 1 cl <- makeCluster(cores)  clusterSetRNGStream(cl, iseed = 20250501)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/epiestim_ebola.html","id":"define-the-epidemic-ans-noise-parameters","dir":"Articles","previous_headings":"","what":"Define the epidemic ans noise parameters","title":"Ebola example - using EpiEstim for estimation","text":"use pathogen = 2 corresponding Ebola Virus Disease.","code":"Epi_pars <- data.frame(   Pathogen = c(\"COVID-19\", \"Ebola\"),   R0 = c(1.305201/0.5, 2.5),   gen_time = c(6.5, 15.0),   gen_time_var = c(2.1, 2.1),   CFR = c(0.0132, 0.5),   mortality_mean = c(10.0, 10.0),   mortality_var = c(1.1, 1.1) )  Noise_pars <- data.frame(   repd_mean = 10.5,  # Reporting delay mean   del_disp = 5.0,    # Reporting delay variance   ur_mean = 0.3,     # Under-reporting mean   ur_beta_a = 50.0   # Beta distribution alpha for under-reporting )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/epiestim_ebola.html","id":"action-space-for-policy-interventions","dir":"Articles","previous_headings":"","what":"Action Space for Policy Interventions","title":"Ebola example - using EpiEstim for estimation","text":"Define non-pharmaceutical interventions: 3 actions, introducing lockdown, social distancing interventions.","code":"# Setting-up the control (using non-pharmaceutical interventions) Action_space <- data.frame (   NPI = c(\"No restrictions\", \"Social distancing\", \"Lockdown\"),   R_coeff = c(1.0, 0.7, 0.4), #R0_act = R0 * ctrl_states   R_beta_a = c(0.0, 5.0, 5.0), #R0_act uncertainty   cost_of_NPI = c(0.0, 0.01, 0.15) )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/epiestim_ebola.html","id":"simulation-parameters","dir":"Articles","previous_headings":"","what":"Simulation parameters","title":"Ebola example - using EpiEstim for estimation","text":"set simulation parameters, targets, R estimation window etc. . account vaccination new variants, therefore set v_max_rate = 0 delta_multiplier = 1.0.","code":"N <- 1e6 # population size I0 <- 10 # initial infections real_days <- 210L #we start the simulation from data here  #Simulation parameters n_ens <- 20L #MC assembly size for 4 sim_ens <- 20L #assembly size for full simulation  C_target <- 50 D_target <- 25 r_trans_len <- 7  sim_settings <- list(   ndays = ndays, #simulation length   start_day = real_days,   N = N, # population size   I0 = I0, # initial infections   C_target = C_target, #target cases   C_target_pen = C_target*1.5, #overshoot penalty threshold   R_target = 1.0,   D_target = D_target, #one way to get peaks at 400 is to increase this to 15   D_target_pen = 50, #max death   #alpha = 1.3/C_target, #~proportional gain (regulates error in cases) covid   alpha = 3.25/C_target, #~proportional gain (regulates error in cases) ebola   alpha_d = 0*1.3/D_target,   ovp = 5.0, #overshoot penalty   dovp = 0*10.0, #death overshoot penalty   gamma = 0.95, #discounting factor   n_ens = n_ens, #MC assembly size for 4   sim_ens = sim_ens, #assembly size for full simulation   rf = 14L, #days 14   R_est_wind = 5L, #rf-2 #window for R estimation   pred_days = 21L,   r_trans_steep = 1.5,  # Growth rate   r_trans_len = r_trans_len,  # Number of days for the transition   t0 = r_trans_len  / 2, # Midpoint of the transition   pathogen = 2,   susceptibles = 1,   delay = 1,   ur = 1,   r_dir = 2,   LD_on = 14, #on threshold   LD_off = 7, #off threshold   v_max_rate = 0,   vac_scale = 100,   vac_start = 370,   delta_scale = 40,   delta_start = 550,   delta_multiplier = 1.0,   v_protection_delta = (58+85)/200,   v_protection_alpha = 0.83 )  # Construct our simulation dataframe: column_names <- c(\"days\", \"sim_id\", \"I\", \"Lambda\", \"C\", \"Lambda_C\", \"S\", \"Re\", \"Rew\", \"Rest\", \"R0est\", \"policy\", \"R_coeff\", \"Real_C\", \"vaccination_rate\", \"delta_prevalence\",\"immunity\")  # Create an empty data frame with specified column names empty_df <- data.frame(matrix(ncol = length(column_names), nrow = 0)) colnames(empty_df) <- column_names  # Create a zero matrix with 10 rows zero_matrix <- matrix(0, nrow = ndays, ncol = length(column_names)) colnames(zero_matrix) <- column_names  # Combine empty data frame and zero matrix using rbind episim_data <- rbind(empty_df, zero_matrix)  #initialisation  episim_data['policy'] <- rep(2, ndays) episim_data['sim_id'] <- rep(1, ndays) episim_data[1:real_days,] <- c(1, 1, I0, I0, Noise_pars['ur_mean']*I0, Noise_pars['ur_mean']*I0, N-I0, Epi_pars[1,'R0']*0.5, Epi_pars[1,'R0']*0.5, Epi_pars[1,'R0']*0.5, Epi_pars[1,'R0'], 2, 0.5, 0, 0, 0, 0) episim_data['days'] <- 1:ndays episim_data['date'] <- all_dates[1:ndays, 'date_reported']  episim_data[1:real_days,\"C\"] <- date_counts_filled$count_i[1:real_days] episim_data[1:real_days,\"I\"] <- date_counts_filled$count_i[1:real_days]/0.3 episim_data[1:nrow(episim_data),\"Real_C\"] <- date_counts_filled$count_i[1:nrow(episim_data)]  # get infectiousness and estimated R-s  gen_time <- 15.0 gen_time_var <- 2.1  R_est_wind <- 5  # Define your window size  Ygen <- dgamma(1:nrow(ebola_data), gen_time/gen_time_var, 1/gen_time_var) Ygen <- Ygen/sum(Ygen)  # Estimate R for (ii in 1:real_days+1) {   if (ii-1 < R_est_wind) {     episim_data[ii, 'Rest'] <- mean(episim_data[1:(ii-1), 'C']) / mean(episim_data[1:(ii-1), 'Lambda_C'])     R_coeff_tmp <- sum(Ygen[1:(ii-1)] * episim_data[(ii-1):1, 'R_coeff']) / sum(Ygen[1:(ii-1)])   } else {     if ( mean(episim_data[(ii-R_est_wind):(ii-1), 'Lambda_C']) == 0){       episim_data[ii, 'Rest'] <- 0       R_coeff_tmp <- 1     } else {       episim_data[ii, 'Rest'] <- mean(episim_data[(ii-R_est_wind):(ii-1), 'C']) / mean(episim_data[(ii-R_est_wind):(ii-1), 'Lambda_C'])       R_coeff_tmp <- sum(Ygen[1:(ii-1)] * episim_data[(ii-1):1, 'R_coeff']) / sum(Ygen[1:(ii-1)])     }   }   episim_data[ii, 'R0est'] <- episim_data[ii, 'Rest'] / R_coeff_tmp   episim_data[ii, 'Lambda_C'] <- sum(episim_data[(ii-1):1,'C']*Ygen[1:(ii-1)])   episim_data[ii, 'Lambda'] <- sum(episim_data[(ii-1):1,'I']*Ygen[1:(ii-1)]) }  Epi_pars[1,\"R0\"] <- episim_data[real_days, 'R0est']  episim_data_ens <- replicate(sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, ndays) }"},{"path":"https://sandorberegi.github.io/EpiControl/articles/epiestim_ebola.html","id":"running-the-simulation","dir":"Articles","previous_headings":"","what":"Running the simulation","title":"Ebola example - using EpiEstim for estimation","text":"Passing simulation setup epicontrol running simulation.","code":"episettings <- list(   sim_function = Epi_MPC_run_V,   reward_function = reward_fun,   R_estimator = R_estim,   noise_par = Noise_pars,   epi_par = Epi_pars,   actions = Action_space,   sim_settings = sim_settings,   parallel = TRUE )  episim_data_ens <- replicate(sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, ndays) }  episettings$cl <- cl  results <- epicontrol(episim_data_ens, episettings) #> [1] 1 #>   |                                                          |                                                  |   0%  episim_data_ens <- results stopCluster(cl)  ## For non-parallel runs:  #for (jj in 1:sim_ens) { #  episim_data_ens[[jj]] <- Epi_MPC_run_wd(episim_data_ens[[jj]], Epi_pars, Noise_pars, Action_space, pred_days = pred_days, n_ens = n_ens, ndays = nrow(episim_data), R_est_wind = R_est_wind, pathogen = 1, susceptibles = 0, delay = 0, ur = 0, r_dir = 2, N = N) #  setTxtProgressBar(pb,jj) #} #close(pb)  # Combine Simulation Results combined_data <- do.call(rbind, episim_data_ens)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/epiestim_ebola.html","id":"plotting-results","dir":"Articles","previous_headings":"","what":"Plotting results","title":"Ebola example - using EpiEstim for estimation","text":"","code":"combined_data <- combined_data %>%   group_by(sim_id, policy) %>%   arrange(days) %>%   mutate(group = cumsum(c(1, diff(days) != 1))) %>%   ungroup()  combined_data <- combined_data %>%   arrange(sim_id, days, policy)  policy_labels <- c(\"0\" = \"Historical data\", \"2\" = \"Social distancing\", \"3\" = \"Lockdown\")  combined_data$policy[combined_data$days < real_days] <- 0  combined_data$date <- date_counts_i_filled[1, 'date_reported']  + (combined_data$days - 1) # Assuming combined_data has a 'date' column ggplot(combined_data %>% filter(sim_id == 1)) +   geom_line(data = subset(combined_data, sim_id != 1),             aes(x = date, y = C, color = as.factor(sim_id)), alpha = 0.1) +   geom_line(aes(x = date, y = C, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0) +   geom_line(aes(x = date, y = Real_C, color = \"blue\", group = 1), alpha = 1.0, size = 0.25) +   geom_hline(yintercept = C_target, linetype = \"dashed\", color = \"blue\", size = 0.25) +   geom_vline(xintercept = date_counts_i_filled[1, 'date_reported'] + (real_days - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   labs(x = \"Date\", y = \"Reported cases\", color = \"Policy\") +   scale_color_manual(values = c(\"No intervention\" = \"chartreuse3\",                                 \"Social distancing\" = \"darkorchid1\",                                 \"Lockdown\" = \"red\",                                 \"Historical data\" = \"black\")) +   guides(color = guide_legend(title = \"Policy\")) ggplot(combined_data %>% filter(sim_id == 2)) +   geom_line(aes(x = date, y = Re, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0) +   scale_color_manual(values = c(\"No intervention\" = \"chartreuse3\",                                 \"Social distancing\" = \"darkorchid1\",                                 \"Lockdown\" = \"red\",                                 \"Historical data\" = \"black\")) +   labs(x = \"Date\", y = \"Re\", color = \"Policy\") +   guides(color = guide_legend(title = \"Policy\")) +   geom_vline(xintercept = date_counts_i_filled[1, 'date_reported'] + (real_days - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   theme_minimal()"},{"path":"https://sandorberegi.github.io/EpiControl/articles/multiple_NPIs.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"multiple_NPIs","text":"vignette demonstrates model predictive optimal control ICU cases COVID-19","code":""},{"path":"https://sandorberegi.github.io/EpiControl/articles/multiple_NPIs.html","id":"load-libraries-and-setup","dir":"Articles","previous_headings":"Overview","what":"Load Libraries and Setup","title":"multiple_NPIs","text":"Load required libraries initialize simulation environment. Initialize cluster parallel computing:","code":"library(EpiControl) library(VGAM) ## Loading required package: stats4 ## Loading required package: splines library(parallel) library(pbapply) library(zoo)  # For rolling sum operations ##  ## Attaching package: 'zoo' ## The following objects are masked from 'package:base': ##  ##     as.Date, as.Date.numeric library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(ggplot2) set.seed(1) cores <- detectCores() - 1 cl <- makeCluster(cores)  clusterSetRNGStream(cl, iseed = 20250501)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/multiple_NPIs.html","id":"epidemiological-and-noise-parameters","dir":"Articles","previous_headings":"Overview","what":"Epidemiological and Noise Parameters","title":"multiple_NPIs","text":"Define parameters pathogens noise: Can include different pathogens, case consider COVID-19 Ebola virus.","code":"Epi_pars <- data.frame(   Pathogen = c(\"COVID-19\", \"Ebola\"),   R0 = c(3.5, 2.5),   gen_time = c(6.5, 15.0),   gen_time_var = c(2.1, 2.1),   CFR = c(0.0132, 0.5),   mortality_mean = c(10.0, 10.0),   mortality_var = c(1.1, 1.1) )  Noise_pars <- data.frame(   repd_mean = 10.5,  # Reporting delay mean   del_disp = 5.0,    # Reporting delay variance   ur_mean = 0.3,     # Under-reporting mean   ur_beta_a = 50.0   # Beta distribution alpha for under-reporting )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/multiple_NPIs.html","id":"action-space-for-policy-interventions","dir":"Articles","previous_headings":"Overview","what":"Action Space for Policy Interventions","title":"multiple_NPIs","text":"Define non-pharmaceutical interventions: 2 actions, introducing “lockdown” interventions.","code":"# we can use 3, 6 or 10 levels #Action_space <- data.frame ( #  NPI = c(\"No restrictions\", \"Social distancing\", \"Lockdown\"), #  R_coeff = c(1.0, 0.5, 0.2), #R0_act = R0 * ctrl_states #  R_beta_a = c(0.0, 5.0, 5.0), #R0_act uncertainty #  cost_of_NPI = c(0.0, 0.01, 0.15) #)  #Action_space <- data.frame ( #  NPI = c(\"No restrictions\", \"SD1\", \"SD2\", \"SD3\", \"SD4\", \"Lockdown\"), #  R_coeff = c(1.0, 0.8, 0.6, 0.4, 0.2, 0.1), #R0_act = R0 * ctrl_states #  R_beta_a = c(0.0, 5.0, 5.0, 5.0, 5.0, 5.0), #R0_act uncertainty #  cost_of_NPI = c(0.0, 0.02, 0.05, 0.08, 0.15, 0.35) #)  Action_space <- data.frame (   NPI = c(\"No restrictions\", \"SD1\", \"SD2\", \"SD3\", \"SD4\", \"SD5\", \"SD6\", \"SD7\", \"SD8\", \"Lockdown\"),   R_coeff = c(1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1), #R0_act = R0 * ctrl_states   R_beta_a = c(0.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0), #R0_act uncertainty   cost_of_NPI = c(0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.065, 0.08, 0.15, 0.35) )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/multiple_NPIs.html","id":"simulation-setup","dir":"Articles","previous_headings":"Overview","what":"Simulation Setup","title":"multiple_NPIs","text":"Set key parameters initialize simulation data:","code":"C_target <- 5000 D_target <- 1 r_trans_len <- 7  sim_settings <- list(   ndays = 121 * 7, #simulation length   start_day = 1,   N = 3.5e6, # population size   I0 = 10, # initial infections   C_target = C_target, #target cases   C_target_pen = C_target*1.5, #overshoot penalty threshold   R_target = 1.0,   D_target = D_target, #one way to get peaks at 400 is to increase this to 15   D_target_pen = 50, #max death   alpha = 1.3/C_target, #~proportional gain (regulates error in cases) covid   #alpha = 3.25/C_target #~proportional gain (regulates error in cases) ebola   alpha_d = 0*1.3/D_target,   ovp = 5.0, #overshoot penalty   dovp = 0*10.0, #death overshoot penalty   gamma = 0.95, #discounting factor   n_ens = 20L, #MC assembly size for 4   sim_ens = 20L, #assembly size for full simulation   rf = 7L, #days 14   R_est_wind = 5L, #rf-2 #window for R estimation   pred_days = 12L,   r_trans_steep = 1.5,  # Growth rate   r_trans_len = r_trans_len,  # Number of days for the transition   t0 = r_trans_len  / 2, # Midpoint of the transition   pathogen = 1,   susceptibles = 1,   delay = 0,   ur = 0,   r_dir = 2 )  column_names <- c(\"days\", \"sim_id\", \"I\", \"Lambda\", \"C\", \"Lambda_C\", \"S\", \"Deaths\", \"Re\", \"Rew\", \"Rest\", \"R0est\", \"policy\", \"R_coeff\") episim_data <- data.frame(matrix(0, nrow = (sim_settings$ndays), ncol = length(column_names))) colnames(episim_data) <- column_names  episim_data$policy <- rep(1, sim_settings$ndays) episim_data$days <- 1:(sim_settings$ndays) episim_data[1, ] <- c(1, 1, sim_settings$I0, sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, Noise_pars$ur_mean * sim_settings$I0, sim_settings$N - sim_settings$I0, 0, Epi_pars[1, \"R0\"], Epi_pars[1, \"R0\"], 1, 1, 1, 1)  episim_data_ens <- replicate(sim_settings$sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_settings$sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, sim_settings$ndays) }"},{"path":"https://sandorberegi.github.io/EpiControl/articles/multiple_NPIs.html","id":"running-the-simulation","dir":"Articles","previous_headings":"Overview","what":"Running the Simulation","title":"multiple_NPIs","text":"Run simulations parallel using pblapply function:","code":"episettings <- list(   sim_function = Epi_MPC_run_wd,   reward_function = reward_fun_wd,   R_estimator = R_estim,   noise_par = Noise_pars,   epi_par = Epi_pars,   actions = Action_space,   sim_settings = sim_settings,   parallel = TRUE )  episettings$cl <- cl  results <- epicontrol(episim_data_ens, episettings) ## [1] 1 ##   |                                                          |                                                  |   0% episim_data_ens <- results stopCluster(cl)  #for (jj in 1:sim_ens) { #  episim_data_ens[[jj]] <- Epi_MPC_run_wd(episim_data_ens[[jj]], Epi_pars, Noise_pars, Action_space, pred_days = pred_days, n_ens = n_ens, ndays = nrow(episim_data), R_est_wind = R_est_wind, pathogen = 1, susceptibles = 0, delay = 0, ur = 0, r_dir = 2, N = N) #  setTxtProgressBar(pb,jj) #} #close(pb)  for (jj in 1:sim_settings$sim_ens) {   episim_data_ens[[jj]] <- head(episim_data_ens[[jj]], -sim_settings$pred_days)   episim_data_ens[[jj]][\"D_roll\"] <- rollsum(episim_data_ens[[jj]][\"Deaths\"], 7, fill = NA)   episim_data_ens[[jj]][\"I_roll\"] <- rollsum(episim_data_ens[[jj]][\"I\"], 7, fill = NA)   episim_data_ens[[jj]][\"D_cum\"] <- cumsum(episim_data_ens[[jj]][\"Deaths\"])   episim_data_ens[[jj]][\"I_cum\"] <- cumsum(episim_data_ens[[jj]][\"I\"]) }  # Combine Simulation Results combined_data <- do.call(rbind, episim_data_ens)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/multiple_NPIs.html","id":"plotting-results","dir":"Articles","previous_headings":"Overview","what":"Plotting results","title":"multiple_NPIs","text":"","code":"combined_data <- combined_data %>%   group_by(sim_id, policy) %>%   arrange(days) %>%   mutate(group = cumsum(c(1, diff(days) != 1))) %>%   ungroup()  combined_data <- combined_data %>%   arrange(sim_id, days, policy)  policy_labels <- c(\"1\" = \"No restrictions\", \"2\" = \"SD1\", \"3\" = \"SD2\", \"4\" = \"SD3\", \"5\" = \"SD4\", \"6\" = \"SD5\", \"7\" = \"SD6\", \"8\" = \"SD7\")  # find the day when herd immunity reached  # Sample constant value HI <- 1/Epi_pars[1,\"R0\"]  # Assuming episim_data_ens[[1]][\"S\"] is a dataframe or list # Extract the vector S_vector <- episim_data_ens[[1]][\"S\"][[1]]  # Compute the fraction S/N fraction <- S_vector / sim_settings$N  # Find the index where the fraction is first smaller than the constant index <- which(fraction < HI)[1]   ggplot(combined_data %>% filter(sim_id == 1)) +   geom_line(data = subset(combined_data, sim_id != 1), aes(x = days, y = C, color = as.factor(sim_id)), alpha = 0.1) +   geom_line(aes(x = days, y = C, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0) +   geom_line(aes(x = days, y = I, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0, size=0.25) +   geom_hline(yintercept = C_target, linetype = \"dashed\", color = \"blue\", size=0.25) +   geom_vline(xintercept = index, linetype = \"dashed\", color = \"black\", size=0.25) +   labs(x = \"Days\", y = \"Reported cases and true infections\", color = \"Policy\") +   scale_color_manual(values = c(\"SD1\" = \"aquamarine\", \"SD2\" = \"darkgoldenrod1\", \"SD3\" = \"deeppink\", \"SD4\" = \"darkorchid1\", \"SD5\" = \"purple\",\"SD6\" = \"red\",\"SD7\" = \"darkred\",  \"No restrictions\" = \"chartreuse3\")) +   #scale_color_manual(values = c(\"SD1\" = \"aquamarine\", \"SD2\" = \"darkgoldenrod1\", \"SD3\" = \"deeppink\", \"SD4\" = \"darkorchid1\", \"SD5\" = \"purple\", \"No restrictions\" = \"chartreuse3\")) +   guides(color = guide_legend(title = \"Policy\"))+   ylim(0,10000)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Vaccination and new variant","text":"vignette demonstrates model predictive optimal control ICU cases COVID-19 vaccination emerging delta variant.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"load-libraries-and-setup","dir":"Articles","previous_headings":"Overview","what":"Load Libraries and Setup","title":"Vaccination and new variant","text":"Load required libraries initialize simulation environment.","code":"library(haven) library(EpiControl) library(VGAM) ## Loading required package: stats4 ## Loading required package: splines library(parallel) library(pbapply) library(zoo)  # For rolling sum operations ##  ## Attaching package: 'zoo' ## The following objects are masked from 'package:base': ##  ##     as.Date, as.Date.numeric library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(ggplot2) set.seed(1)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"load-data","dir":"Articles","previous_headings":"Overview","what":"Load data","title":"Vaccination and new variant","text":"Initialize cluster parallel computing:","code":"# from here: https://www.thelancet.com/journals/lanpub/article/PIIS2468-2667(22)00060-3/fulltext  data <- read_dta('covid_data/Data_from_OxCGRT.dta')  # Filter rows where country is \"United Kingdom\" uk_data <- subset(data, country == \"United Kingdom\")  pop_data <- read_dta('covid_data/World_population_world_bank.dta')  uk_pop <- pop_data[251, 2]  # Convert date column to Date type if necessary uk_data$date_mdy <- as.Date(uk_data$date_mdy, format=\"%m/%d/%Y\")  uk_data$daily_cases_100k <- round((uk_data$daily_cases_100k)*67215293/1e5, digits =  0)  uk_data$daily_cases_100k[is.na(uk_data$daily_cases_100k)] <- 0  real_days <- 370L cores <- detectCores() - 1 cl <- makeCluster(cores)  clusterSetRNGStream(cl, iseed = 20250501)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"epidemiological-and-noise-parameters","dir":"Articles","previous_headings":"Overview","what":"Epidemiological and Noise Parameters","title":"Vaccination and new variant","text":"Define parameters pathogens noise: Can include different pathogens, case consider COVID-19 Ebola virus.","code":"Epi_pars <- data.frame(   Pathogen = c(\"COVID-19\", \"Ebola\"),   R0 = c(1.305201/0.5, 2.5),   gen_time = c(6.5, 15.0),   gen_time_var = c(2.1, 2.1),   CFR = c(0.0132, 0.5),   mortality_mean = c(10.0, 10.0),   mortality_var = c(1.1, 1.1) )  Noise_pars <- data.frame(   repd_mean = 10.5,  # Reporting delay mean   del_disp = 5.0,    # Reporting delay variance   ur_mean = 0.3,     # Under-reporting mean   ur_beta_a = 50.0   # Beta distribution alpha for under-reporting )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"action-space-for-policy-interventions","dir":"Articles","previous_headings":"Overview","what":"Action Space for Policy Interventions","title":"Vaccination and new variant","text":"Define non-pharmaceutical interventions: 2 actions, introducing “lockdown” interventions.","code":"# Setting-up the control (using non-pharmaceutical interventions) Action_space <- data.frame (   NPI = c(\"No restrictions\", \"Social distancing\", \"Lockdown\"),   R_coeff = c(1.0, 0.5, 0.2), #R0_act = R0 * ctrl_states   R_beta_a = c(0.0, 5.0, 5.0), #R0_act uncertainty   cost_of_NPI = c(0.0, 0.01, 0.15) )"},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"simulation-setup","dir":"Articles","previous_headings":"Overview","what":"Simulation Setup","title":"Vaccination and new variant","text":"Set key parameters initialize simulation data:","code":"ndays <- real_days+61L*7L#epidemic length #simulation length N <- 1e7 # population size I0 <- 10 # initial infections  #Simulation parameters n_ens <- 20L #MC assembly size for 4 sim_ens <- 20L #assembly size for full simulation  C_target <- 5000 D_target <- 12 r_trans_len <- 7  sim_settings <- list(   ndays = ndays, #simulation length   start_day = real_days,   N = N, # population size   I0 = I0, # initial infections   C_target = C_target, #target cases   C_target_pen = C_target*1.5, #overshoot penalty threshold   R_target = 1.0,   D_target = D_target, #one way to get peaks at 400 is to increase this to 15   D_target_pen = 50, #max death   alpha = 1.3/C_target, #~proportional gain (regulates error in cases) covid   #alpha = 3.25/C_target #~proportional gain (regulates error in cases) ebola   alpha_d = 0*1.3/D_target,   ovp = 5.0, #overshoot penalty   dovp = 0*10.0, #death overshoot penalty   gamma = 0.95, #discounting factor   n_ens = n_ens, #MC assembly size for 4   sim_ens = sim_ens, #assembly size for full simulation   rf = 7L, #days 14   R_est_wind = 5L, #rf-2 #window for R estimation   pred_days = 12L,   r_trans_steep = 1.5,  # Growth rate   r_trans_len = r_trans_len,  # Number of days for the transition   t0 = r_trans_len  / 2, # Midpoint of the transition   pathogen = 1,   susceptibles = 0,   delay = 1,   ur = 1,   r_dir = 2,   LD_on = 14, #on threshold   LD_off = 7, #off threshold   v_max_rate = 0.8,   vac_scale = 100,   vac_start = 370,   delta_scale = 40,   delta_start = 550,   delta_multiplier = 1.75,   v_protection_delta = (58+85)/200,   v_protection_alpha = 0.83 )  # Original episim_data column_names <- c(\"days\", \"sim_id\", \"I\", \"Lambda\", \"C\", \"Lambda_C\", \"S\", \"Re\", \"Rew\", \"Rest\", \"R0est\", \"policy\", \"R_coeff\", \"Real_C\", \"vaccination_rate\", \"delta_prevalence\",\"immunity\")  # Create an empty data frame with specified column names empty_df <- data.frame(matrix(ncol = length(column_names), nrow = 0)) colnames(empty_df) <- column_names  # Print the structure of the empty data frame # Create a zero matrix with 10 rows zero_matrix <- matrix(0, nrow = ndays, ncol = length(column_names)) colnames(zero_matrix) <- column_names  # Combine empty data frame and zero matrix using rbind episim_data <- rbind(empty_df, zero_matrix)  #initialisation  episim_data['policy'] <- rep(3, ndays) episim_data['sim_id'] <- rep(1, ndays) episim_data[1:real_days,] <- c(1, 1, I0, I0, Noise_pars['ur_mean']*I0, Noise_pars['ur_mean']*I0, N-I0, Epi_pars[1,'R0']*0.5, Epi_pars[1,'R0']*0.5, Epi_pars[1,'R0']*0.5, Epi_pars[1,'R0'], 2, 0.5, 0, 0, 0, 0) episim_data['days'] <- 1:ndays episim_data['date'] <- uk_data$date_mdy[1:ndays]  episim_data[1:real_days,\"C\"] <- uk_data$daily_cases_100k[1:real_days] episim_data[1:real_days,\"I\"] <- uk_data$daily_cases_100k[1:real_days]/0.3 episim_data[1:nrow(episim_data),\"Real_C\"] <- uk_data$daily_cases_100k[1:nrow(episim_data)]  # get infectiousness and estimated R-s  gen_time <- 6.5 gen_time_var <- 2.1  R_est_wind <- 5  # Define your window size  Ygen <- dgamma(1:nrow(uk_data), gen_time/gen_time_var, 1/gen_time_var) Ygen <- Ygen/sum(Ygen)  # Estimate R for (ii in 1:real_days+1) {   if (ii-1 < R_est_wind) {     episim_data[ii, 'Rest'] <- mean(episim_data[1:(ii-1), 'C']) / mean(episim_data[1:(ii-1), 'Lambda_C'])     R_coeff_tmp <- sum(Ygen[1:(ii-1)] * episim_data[(ii-1):1, 'R_coeff']) / sum(Ygen[1:(ii-1)])   } else {     if ( mean(episim_data[(ii-R_est_wind):(ii-1), 'Lambda_C']) == 0){       episim_data[ii, 'Rest'] <- 0       R_coeff_tmp <- 1     } else {       episim_data[ii, 'Rest'] <- mean(episim_data[(ii-R_est_wind):(ii-1), 'C']) / mean(episim_data[(ii-R_est_wind):(ii-1), 'Lambda_C'])       R_coeff_tmp <- sum(Ygen[1:(ii-1)] * episim_data[(ii-1):1, 'R_coeff']) / sum(Ygen[1:(ii-1)])     }   }   episim_data[ii, 'R0est'] <- episim_data[ii, 'Rest'] / R_coeff_tmp   episim_data[ii, 'Lambda_C'] <- sum(episim_data[(ii-1):1,'C']*Ygen[1:(ii-1)])   episim_data[ii, 'Lambda'] <- sum(episim_data[(ii-1):1,'I']*Ygen[1:(ii-1)]) }  Epi_pars[1,\"R0\"] <- episim_data[real_days, 'R0est']  episim_data_ens <- replicate(sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, ndays) }"},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"running-the-simulation","dir":"Articles","previous_headings":"Overview","what":"Running the Simulation","title":"Vaccination and new variant","text":"Run simulations parallel using pblapply function:","code":"episettings <- list(   sim_function = Epi_MPC_run_V,   reward_function = reward_fun,   R_estimator = R_estim,   noise_par = Noise_pars,   epi_par = Epi_pars,   actions = Action_space,   sim_settings = sim_settings,   parallel = TRUE )  episim_data_ens <- replicate(sim_ens, episim_data, simplify = FALSE)  for (ii in 1:sim_ens) {   episim_data_ens[[ii]]$sim_id <- rep(ii, ndays) }  episettings$cl <- cl  results <- epicontrol(episim_data_ens, episettings) ## [1] 0 ##   |                                                          |                                                  |   0% episim_data_ens <- results stopCluster(cl)  #for (jj in 1:sim_ens) { #  episim_data_ens[[jj]] <- Epi_MPC_run_wd(episim_data_ens[[jj]], Epi_pars, Noise_pars, Action_space, pred_days = pred_days, n_ens = n_ens, ndays = nrow(episim_data), R_est_wind = R_est_wind, pathogen = 1, susceptibles = 0, delay = 0, ur = 0, r_dir = 2, N = N) #  setTxtProgressBar(pb,jj) #} #close(pb)  # Combine Simulation Results combined_data <- do.call(rbind, episim_data_ens)"},{"path":"https://sandorberegi.github.io/EpiControl/articles/vaccine_variants_MPC.html","id":"plotting-results","dir":"Articles","previous_headings":"Overview","what":"Plotting results","title":"Vaccination and new variant","text":"### Show Vaccination immunity rates Re","code":"combined_data <- combined_data %>%   group_by(sim_id, policy) %>%   arrange(days) %>%   mutate(group = cumsum(c(1, diff(days) != 1))) %>%   ungroup()  combined_data <- combined_data %>%   arrange(sim_id, days, policy)  policy_labels <- c(\"0\" = \"Historical data\", \"1\" = \"No intervention\", \"2\" = \"Social distancing\", \"3\" = \"Lockdown\")  critical_immunity <- 1-1/(1.305201/0.5)  difference <- combined_data$immunity - critical_immunity  # Find the index of the first positive value switch_index <- which(difference > 0)[1]  # Get the corresponding day (row index, assuming days are rows) #switch_day <- if (!is.na(switch_index)) switch_index else NA switch_day <- 536  # Print the result if (!is.na(switch_day)) {   cat(\"The switch from negative to positive occurs on day:\", switch_day, \"\\n\") } else {   cat(\"No switch from negative to positive was found.\\n\") } ## The switch from negative to positive occurs on day: 536 combined_data$policy[combined_data$days < real_days] <- 0  combined_data$date <- as.Date(\"2020-01-01\") + (combined_data$days - 1) # Assuming combined_data has a 'date' column ggplot(combined_data %>% filter(sim_id == 1)) +   geom_line(data = subset(combined_data, sim_id != 1),             aes(x = date, y = C, color = as.factor(sim_id)), alpha = 0.1) +   geom_line(aes(x = date, y = C, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0) +   geom_line(aes(x = date, y = Real_C, color = \"blue\", group = 1), alpha = 1.0, size = 0.25) +   geom_hline(yintercept = C_target, linetype = \"dashed\", color = \"blue\", size = 0.25) +   geom_vline(xintercept = as.Date(\"2020-01-01\") + (real_days - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   geom_vline(xintercept = as.Date(\"2020-01-01\") + (switch_day - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   labs(x = \"Date\", y = \"Reported cases\", color = \"Policy\") +   scale_color_manual(values = c(\"No intervention\" = \"chartreuse3\",                                 \"Social distancing\" = \"darkorchid1\",                                 \"Lockdown\" = \"red\",                                 \"Historical data\" = \"black\")) +   guides(color = guide_legend(title = \"Policy\")) library(patchwork)  plot1 <- ggplot(combined_data %>% filter(sim_id == 1)) +   geom_line(data = subset(combined_data, sim_id == 1),             aes(x = date, y = vaccination_rate), color = \"red\", alpha = 1.0) +   geom_line(data = subset(combined_data, sim_id == 1),             aes(x = date, y = delta_prevalence), color = \"blue\", alpha = 1.0) +   geom_line(data = subset(combined_data, sim_id == 1),             aes(x = date, y = immunity), color = \"purple\", alpha = 1.0) +   geom_vline(xintercept = as.Date(\"2020-01-01\") + (real_days - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   geom_vline(xintercept = as.Date(\"2020-01-01\") + (switch_day - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   labs(x = \"Date\", y = \"Vaccination rate\") +   ylim(0, 1) +   theme_minimal()  # Update plot2 with dates plot2 <- ggplot(combined_data %>% filter(sim_id == 1)) +   geom_line(aes(x = date, y = Re, color = factor(policy, labels = policy_labels), group = 1), alpha = 1.0) +   scale_color_manual(values = c(\"No intervention\" = \"chartreuse3\",                                 \"Social distancing\" = \"darkorchid1\",                                 \"Lockdown\" = \"red\",                                 \"Historical data\" = \"black\")) +   labs(x = \"Date\", y = \"Re\", color = \"Policy\") +   guides(color = guide_legend(title = \"Policy\")) +   geom_vline(xintercept = as.Date(\"2020-01-01\") + (real_days - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   geom_vline(xintercept = as.Date(\"2020-01-01\") + (switch_day - 1),              linetype = \"dashed\", color = \"black\", size = 0.25) +   theme_minimal()  # Combine the two plots using patchwork combined_plot <- plot1 / plot2 combined_plot"},{"path":"https://sandorberegi.github.io/EpiControl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sandor Beregi. Maintainer.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beregi S (2025). EpiControl: Simulation Framework Epidemic Dynamics Optimal Control Policies. R package version 0.2.0, https://sandorberegi.github.io/EpiControl/.","code":"@Manual{,   title = {EpiControl: Simulation Framework for Epidemic Dynamics and Optimal Control Policies},   author = {Sandor Beregi},   year = {2025},   note = {R package version 0.2.0},   url = {https://sandorberegi.github.io/EpiControl/}, }"},{"path":"https://sandorberegi.github.io/EpiControl/index.html","id":"epicontrol","dir":"","previous_headings":"","what":"Simulation Framework for Epidemic Dynamics and Optimal Control Policies","title":"Simulation Framework for Epidemic Dynamics and Optimal Control Policies","text":"code related paper (preparation): Sandor Beregi, Sangeeta Bhatia, Anne Cori Kris V. Parag, EpiControl: automating optimising epidemic interventions realted methodology also used : Sandor Beregi, Kris V. Parag, Optimal algorithms controlling infectious diseases real time using noisy infection data. paper peer-review preprint available MedRXiv Link code intially adapted Epicont.jl Julia package. construction.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_V.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Epidemic Dynamics with Vaccination and a New Variants — Epi_MPC_run_V","title":"Simulate Epidemic Dynamics with Vaccination and a New Variants — Epi_MPC_run_V","text":"function simulates epidemic dynamics using predefined parameters incorporates vaccination variant-specific adjustments reproduction number population immunity. Policies evaluated periodically maximize rewards based predicted outcomes.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_V.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Epidemic Dynamics with Vaccination and a New Variants — Epi_MPC_run_V","text":"","code":"Epi_MPC_run_V(   episimdata,   episettings,   epi_par,   noise_par,   actions,   pred_days,   n_ens = 100,   start_day = 1,   ndays = nrow(episimdata),   R_est_wind = 5,   pathogen = 1,   susceptibles = 1,   delay = 0,   ur = 0,   r_dir = 0,   N = 1e+06 )"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_V.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Epidemic Dynamics with Vaccination and a New Variants — Epi_MPC_run_V","text":"episimdata data frame containing simulation data. include columns : \"\": Number infected individuals. \"C\": Reported cases. \"S\": Number susceptible individuals. \"R_coeff\": Coefficient reproduction number reduction policy. \"vaccination_rate\": Rate vaccination. \"delta_prevalence\": Prevalence Delta variant. \"immunity\": Level population immunity. epi_par data frame epidemiological parameters, including: \"R0\": Basic reproduction number. \"gen_time\": Disease generation time. \"gen_time_var\": Variance generation time. noise_par data frame containing noise parameters: \"repd_mean\": Reporting delay mean. \"del_disp\": Dispersion parameter reporting delays. \"ur_mean\": Mean -reporting rate. \"ur_beta_a\": Alpha parameter Beta distribution -reporting. actions data frame containing policy actions reproduction coefficients (\"R_coeff\"). pred_days integer specifying number days predict ahead policy evaluation. n_ens integer specifying number ensemble runs Monte Carlo simulations. Defaults 100. start_day integer indicating start day simulation. Defaults 1. ndays integer specifying total number simulation days. Defaults number rows episimdata. R_est_wind integer specifying rolling window size reproduction number estimation. Defaults 5. pathogen integer string identifying pathogen parameter selection. Defaults 1. susceptibles binary value (0 1) indicating whether simulate changes susceptibles. Defaults 1. delay binary value (0 1) indicating whether simulate reporting delays. Defaults 0. ur binary value (0 1) indicating whether simulate -reporting. Defaults 0. N numeric value specifying total population size. Defaults 1e6.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_V.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Epidemic Dynamics with Vaccination and a New Variants — Epi_MPC_run_V","text":"data frame containing updated simulation data computed reproduction numbers, estimated policies, daily infection incidents, cases, deaths, epidemic metrics.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_V.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Epidemic Dynamics with Vaccination and a New Variants — Epi_MPC_run_V","text":"function models effects vaccination variants (e.g., Delta) epidemic dynamics. vaccination rate computed using vac(), variant prevalence determined using delta(). Adjustments reproduction number population immunity incorporated based factors. Policies evaluated periodically, optimal policy selected based expected rewards computed ensemble simulations.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_V.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Epidemic Dynamics with Vaccination and a New Variants — Epi_MPC_run_V","text":"","code":"# Example data and parameters episimdata <- data.frame(I = c(10, 20), C = c(10, 15), S = c(1000, 990), R_coeff = c(1.0, 0.9)) epi_par <- data.frame(   R0 = 2.5, gen_time = 5, gen_time_var = 1 ) noise_par <- data.frame(   repd_mean = 2, del_disp = 1.5, ur_mean = 0.8, ur_beta_a = 2 ) actions <- data.frame(R_coeff = c(1.0, 0.3)) results <- Epi_MPC_run_V(   episimdata = episimdata, epi_par = epi_par, noise_par = noise_par,   actions = actions, pred_days = 10, n_ens = 50, start_day = 1,   ndays = 20, R_est_wind = 5, pathogen = 1, susceptibles = 1,   delay = 0, ur = 0, N = 1e6 ) #> Error in Epi_MPC_run_V(episimdata = episimdata, epi_par = epi_par, noise_par = noise_par,     actions = actions, pred_days = 10, n_ens = 50, start_day = 1,     ndays = 20, R_est_wind = 5, pathogen = 1, susceptibles = 1,     delay = 0, ur = 0, N = 1e+06): argument \"episettings\" is missing, with no default"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_est_D.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Epidemic Dynamics with MPC Using Deaths only for projections — Epi_MPC_run_est_D","title":"Simulate Epidemic Dynamics with MPC Using Deaths only for projections — Epi_MPC_run_est_D","text":"function simulates epidemic dynamics using predefined set parameters estimates reproduction numbers based reported deaths.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_est_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Epidemic Dynamics with MPC Using Deaths only for projections — Epi_MPC_run_est_D","text":"","code":"Epi_MPC_run_est_D(   episimdata,   episettings,   epi_par,   noise_par,   actions,   pred_days,   n_ens = 100,   start_day = 1,   ndays = nrow(episimdata),   R_est_wind = 5,   pathogen = 1,   susceptibles = 1,   delay = 0,   ur = 0,   r_dir = 1,   N = 1e+06 )"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_est_D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Epidemic Dynamics with MPC Using Deaths only for projections — Epi_MPC_run_est_D","text":"episimdata data frame containing simulation data. include columns : \"\": Number infected individuals. \"C\": Reported cases. \"S\": Number susceptible individuals. \"Lambda\": Total infectiousness. \"Deaths\": Number deaths. \"Lambda_C\": Total infectiousness derived cases. \"S\": Number susceptible individuals. \"R_coeff\": Coefficient reproduction number reduction policy. epi_par data frame epidemiological parameters, including: \"R0\": Basic reproduction number. \"gen_time\": Disease mean generation time. \"gen_time_var\": Variance generation time. \"CFR\": Case fatality rate. \"mortality_mean\": Mean delay mortality. \"mortality_var\": Variance mortality delay. noise_par data frame containing noise parameters: \"repd_mean\": Reporting delay mean. \"del_disp\": Dispersion parameter reporting delays. \"ur_mean\": Mean -reporting rate. \"ur_beta_a\": Alpha parameter Beta distribution -reporting. actions data frame containing policy actions reproduction coefficients (\"R_coeff\"). pred_days integer specifying number days predict ahead policy evaluation. n_ens integer specifying number ensemble runs Monte Carlo simulations. Defaults 100. start_day integer indicating start day simulation. Defaults 1. ndays integer specifying total number simulation days. Defaults number rows episimdata. R_est_wind integer specifying rolling window size reproduction number estimation. Defaults 5. pathogen integer specifying pathogen extract corresponding epidemiological parameters. Defaults 1. susceptibles binary value (0 1) indicating whether simulate changes susceptibles. Defaults 1. delay binary value (0 1) indicating whether simulate reporting delays. Defaults 0. ur binary value (0 1) indicating whether simulate -reporting. Defaults 0. r_dir integer indicating reproduction number adjustments: 1 direct Re. 2 logistic adjustments. 0 using generation time distribution. N numeric value representing total population size. Defaults 1e6.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_est_D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Epidemic Dynamics with MPC Using Deaths only for projections — Epi_MPC_run_est_D","text":"data frame containing updated simulation data computed reproduction numbers, estimated policies, daily infection incidents, cases, deaths, epidemic metrics.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_est_D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Epidemic Dynamics with MPC Using Deaths only for projections — Epi_MPC_run_est_D","text":"function estimates reproduction numbers (R0est) based deaths (\"Deaths\") using rolling window approach. Policies evaluated periodically using Monte Carlo strategy, optimal policies selected based highest expected rewards.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_est_D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Epidemic Dynamics with MPC Using Deaths only for projections — Epi_MPC_run_est_D","text":"","code":"# Example data and parameters episimdata <- data.frame(I = c(10, 20), Deaths = c(1, 2), Lambda_C = c(10, 15), S = c(1000, 990), R_coeff = c(1.0, 0.9)) epi_par <- data.frame(   R0 = 2.5, gen_time = 5, gen_time_var = 1, CFR = 0.02,   mortality_mean = 14, mortality_var = 2 ) noise_par <- data.frame(   repd_mean = 2, del_disp = 1.5, ur_mean = 0.8, ur_beta_a = 2 ) actions <- data.frame(R_coeff = c(1.0, 0.3)) results <- Epi_MPC_run_est_D(   episimdata = episimdata, epi_par = epi_par, noise_par = noise_par,   actions = actions, pred_days = 10, n_ens = 50, start_day = 1,   ndays = 20, R_est_wind = 5, pathogen = 1, susceptibles = 1,   delay = 0, ur = 0, r_dir = 1, N = 1e6 ) #> Error in Epi_MPC_run_est_D(episimdata = episimdata, epi_par = epi_par,     noise_par = noise_par, actions = actions, pred_days = 10,     n_ens = 50, start_day = 1, ndays = 20, R_est_wind = 5, pathogen = 1,     susceptibles = 1, delay = 0, ur = 0, r_dir = 1, N = 1e+06): argument \"episettings\" is missing, with no default"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Epidemic Dynamics with Model Predictive Control — Epi_MPC_run_wd","title":"Simulate Epidemic Dynamics with Model Predictive Control — Epi_MPC_run_wd","text":"function simulates epidemic model predictive control (MPC) using pre-defined parameters. dynamically evaluates actions maximize expected rewards updates epidemic states accordingly.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Epidemic Dynamics with Model Predictive Control — Epi_MPC_run_wd","text":"","code":"Epi_MPC_run_wd(   episimdata,   episettings,   epi_par,   noise_par,   actions,   pred_days,   n_ens = 100,   start_day = 1,   ndays = nrow(episimdata),   R_est_wind = 5,   pathogen = 1,   susceptibles = 1,   delay = 0,   ur = 0,   r_dir = 1,   N = 1e+06 )"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Epidemic Dynamics with Model Predictive Control — Epi_MPC_run_wd","text":"episimdata data frame containing simulation data. include columns \"C\" (cases), \"\" (infected individuals), \"Re\" (effective reproduction number), \"S\" (susceptible individuals), \"Deaths\", \"Lambda\" total infectiousness. epi_par data frame containing epidemiological parameters various pathogens. following columns: \"R0\" (basic reproduction number), \"gen_time\" (generation time), \"gen_time_var\" (variance generation time), \"CFR\" (case fatality rate), \"mortality_mean\" (mean mortality delay), \"mortality_var\" (mortality delay variance). noise_par data frame containing noise parameters -reporting reporting delays: \"repd_mean\": Mean reporting delay. \"del_disp\": Dispersion parameter reporting delay distribution. \"ur_mean\": Mean -reporting rate. \"ur_beta_a\": Alpha parameter Beta distribution -reporting. actions data frame containing control actions. include columns like \"R_coeff\". pred_days integer specifying number days predict ahead reward calculation. n_ens integer specifying number ensemble runs expected reward calculation. Defaults 100. start_day integer specifying start day simulation. Defaults 1. ndays integer specifying total number simulation days. Defaults number rows episimdata. R_est_wind integer specifying window size reproduction number estimation. Defaults 5. pathogen integer string identifying pathogen extract corresponding parameters. Defaults 1. susceptibles binary value (0 1) indicating whether update number susceptibles. Defaults 1. delay binary value (0 1) indicating whether simulate reporting delays. Defaults 0. ur binary value (0 1) indicating whether simulate -reporting. Defaults 0. r_dir integer specifying reproduction number adjustments: 1 direct Re. 2 logistic adjustments. 0 using generation time distribution. N numeric value representing total population size. Defaults 1e6.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Epidemic Dynamics with Model Predictive Control — Epi_MPC_run_wd","text":"data frame containing updated simulation data computed reproduction numbers, estimated policies, daily infection incidents, cases, deaths, epidemic metrics.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Epidemic Dynamics with Model Predictive Control — Epi_MPC_run_wd","text":"function employs model predictive control strategy actions evaluated periodically (based refresh interval, rf). Expected rewards computed using Epi_pred_wd function specified prediction horizon, optimal action selected. simulation incorporates effects -reporting, reporting delays, susceptible depletion based provided parameters.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Epidemic Dynamics with Model Predictive Control — Epi_MPC_run_wd","text":"","code":"# Example epidemiological data episimdata <- data.frame(C = c(0, 10), I = c(5, 8), Re = c(1.5, NA), S = c(1000, 990), Deaths = c(0, 1)) epi_par <- data.frame(   R0 = 2.5, gen_time = 5, gen_time_var = 1,   CFR = 0.02, mortality_mean = 14, mortality_var = 2 ) noise_par <- data.frame(   repd_mean = 2, del_disp = 1.5, ur_mean = 0.8, ur_beta_a = 2 ) actions <- data.frame(R_coeff = c(0.9, 1.1)) updated_data <- Epi_MPC_run_wd(   episimdata = episimdata, epi_par = epi_par, noise_par = noise_par,   actions = actions, pred_days = 10, n_ens = 50, start_day = 1,   ndays = 20, R_est_wind = 5, pathogen = 1, susceptibles = 1,   delay = 0, ur = 0, r_dir = 1, N = 1e6 ) #> Error in Epi_MPC_run_wd(episimdata = episimdata, epi_par = epi_par, noise_par = noise_par,     actions = actions, pred_days = 10, n_ens = 50, start_day = 1,     ndays = 20, R_est_wind = 5, pathogen = 1, susceptibles = 1,     delay = 0, ur = 0, r_dir = 1, N = 1e+06): argument \"episettings\" is missing, with no default"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd_thr.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Epidemic Dynamics with Threshold-based Policy Control — Epi_MPC_run_wd_thr","title":"Simulate Epidemic Dynamics with Threshold-based Policy Control — Epi_MPC_run_wd_thr","text":"function simulates epidemic using predefined parameters dynamically applying threshold-based policy interventions, lockdowns, based rolling averages deaths.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd_thr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Epidemic Dynamics with Threshold-based Policy Control — Epi_MPC_run_wd_thr","text":"","code":"Epi_MPC_run_wd_thr(   episimdata,   episettings,   epi_par,   noise_par,   actions,   pred_days,   n_ens = 100,   start_day = 1,   ndays = nrow(episimdata),   R_est_wind = 5,   pathogen = 1,   susceptibles = 1,   delay = 0,   ur = 0,   r_dir = 0,   N = 1e+06 )"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd_thr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Epidemic Dynamics with Threshold-based Policy Control — Epi_MPC_run_wd_thr","text":"episimdata data frame containing simulation data. include columns \"\" (infected individuals), \"C\" (cases), \"Deaths\", \"S\" (susceptible individuals), \"R_coeff\" (Coefficient reproduction number reduction policy), related epidemiological metrics. epi_par data frame containing epidemiological parameters pathogen, including: \"R0\": Basic reproduction number. \"gen_time\": Generation time disease. \"gen_time_var\": Dispersion generation time. \"CFR\": Case fatality rate. \"mortality_mean\": Mean mortality delay. \"mortality_var\": Dispersion mortality delay. noise_par data frame containing noise parameters, : \"repd_mean\": Reporting delay mean. \"del_disp\": Dispersion reporting delay. \"ur_mean\": Mean -reporting rate. \"ur_beta_a\": Alpha parameter Beta distribution -reporting. actions data frame containing control actions. include columns : \"R_coeff\": effect policy reproduction number. pred_days integer specifying number days predict ahead policy evaluation. n_ens integer specifying number ensemble runs Monte Carlo simulations. Defaults 100. start_day integer specifying day start simulation. Defaults 1. ndays integer specifying total number simulation days. Defaults number rows episimdata. R_est_wind integer specifying rolling window size estimating reproduction number. Defaults 5. pathogen integer string identifying pathogen extract parameters . Defaults 1. susceptibles binary value (0 1) indicating whether update number susceptibles. Defaults 1. delay binary value (0 1) indicating whether simulate reporting delays. Defaults 0. ur binary value (0 1) indicating whether simulate -reporting. Defaults 0. r_dir integer indicating reproduction number adjustments: 1 direct Re. 2 logistic adjustments. 0 using generation time distribution. N numeric value representing total population size. Defaults 1e6. LD_on Threshold starting lockdown LD_off Threshold ending lockdown","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd_thr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Epidemic Dynamics with Threshold-based Policy Control — Epi_MPC_run_wd_thr","text":"data frame containing updated simulation data computed reproduction numbers, estimated policies, daily infection incidents, cases, deaths, epidemic metrics.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd_thr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Epidemic Dynamics with Threshold-based Policy Control — Epi_MPC_run_wd_thr","text":"function employs threshold-based approach policy control, interventions lockdowns triggered based rolling averages deaths (Deaths_roll_avg). Deaths may also refer metrics delayed infections, e.g. ICU cases. Policies evaluated periodically, transitions occur rolling average exceeds drops predefined thresholds.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_MPC_run_wd_thr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Epidemic Dynamics with Threshold-based Policy Control — Epi_MPC_run_wd_thr","text":"","code":"# Example data and parameters episimdata <- data.frame(I = c(10, 20), C = c(10, 15), Deaths = c(1, 2), S = c(1000, 990), R_coeff = c(1.0, 0.9)) epi_par <- data.frame(   R0 = 2.5, gen_time = 5, gen_time_var = 1, CFR = 0.02,   mortality_mean = 14, mortality_var = 2 ) noise_par <- data.frame(   repd_mean = 2, del_disp = 1.5, ur_mean = 0.8, ur_beta_a = 2 ) actions <- data.frame(R_coeff = c(1.0, 0.3)) results <- Epi_MPC_run_wd_thr(   episimdata = episimdata, epi_par = epi_par, noise_par = noise_par,   actions = actions, pred_days = 10, n_ens = 50, start_day = 1,   ndays = 20, R_est_wind = 5, pathogen = 1, susceptibles = 1,   delay = 0, ur = 0, r_dir = 0, N = 1e6 ) #> Error in Epi_MPC_run_wd_thr(episimdata = episimdata, epi_par = epi_par,     noise_par = noise_par, actions = actions, pred_days = 10,     n_ens = 50, start_day = 1, ndays = 20, R_est_wind = 5, pathogen = 1,     susceptibles = 1, delay = 0, ur = 0, r_dir = 0, N = 1e+06): argument \"episettings\" is missing, with no default"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection of epidemic outcomes and calculating expected reward -- use when death data is not available — Epi_pred","title":"Projection of epidemic outcomes and calculating expected reward -- use when death data is not available — Epi_pred","text":"#' function projects epidemic progression based given parameters, simulating infections deaths prediction window. incorporates intervention effects computes expected reward values.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection of epidemic outcomes and calculating expected reward -- use when death data is not available — Epi_pred","text":"","code":"Epi_pred(   episimdata,   episettings,   epi_par,   noise_par,   actions,   pathogen,   pred_days,   kk,   jj,   N,   ndays = nrow(episimdata),   pred_susceptibles = 0,   gamma = 0.95 )"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection of epidemic outcomes and calculating expected reward -- use when death data is not available — Epi_pred","text":"episimdata data frame containing epidemic simulation data. epi_par data frame epidemiological parameters, rows corresponding different pathogens. noise_par parameter related stochastic noise epidemic simulation (used function). actions data frame control actions, second column modifies estimated reproduction number. pathogen integer specifying pathogen extract corresponding epidemiological parameters. pred_days number days predict forward. kk starting day prediction. jj index action scenario simulated. N total population size. ndays total number days epidemic simulation (default: `nrow(episimdata)`). pred_susceptibles Logical (0 1), indicating whether susceptible population dynamics accounted . gamma discount factor future rewards (default: 0.95).","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection of epidemic outcomes and calculating expected reward -- use when death data is not available — Epi_pred","text":"expected reward (`Exp_rew`) simulation period.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection of epidemic outcomes and calculating expected reward -- use when death data is not available — Epi_pred","text":"function updates effective reproduction number (`Re`), computes expected number new cases (`C`), applies discount factor rewards computed using `reward_fun`. function assumes cases follow Poisson process uses gamma-distributed generation time estimate infection dynamics.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_est_D.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection of epidemic outcomes and calculates expected reward using Deaths only — Epi_pred_est_D","title":"Projection of epidemic outcomes and calculates expected reward using Deaths only — Epi_pred_est_D","text":"function projects epidemic progression based given parameters, simulating infections deaths prediction window. incorporates intervention effects computes expected reward values using Deaths . Assumes infections seen/considered.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_est_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection of epidemic outcomes and calculates expected reward using Deaths only — Epi_pred_est_D","text":"","code":"Epi_pred_est_D(   episimdata,   episettings,   epi_par,   noise_par,   actions,   pathogen,   pred_days,   r_dir,   kk,   jj,   N,   ndays = nrow(episimdata),   pred_susceptibles = 0,   gamma = 0.95 )"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_est_D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection of epidemic outcomes and calculates expected reward using Deaths only — Epi_pred_est_D","text":"episimdata Data frame containing epidemic simulation data. epi_par Data frame epidemiological parameters indexed pathogen. noise_par Data frame noise parameters (used function included consistency). actions Data frame intervention actions corresponding effects. pathogen integer specifying pathogen extract corresponding epidemiological parameters. pred_days Integer indicating number days predict ahead. r_dir Integer controlling reproductive number adjustment method (1, 2, ). kk Integer indicating current time step simulation. jj Integer indexing intervention scenario. N Integer representing total population. ndays Integer specifying total number days simulation (default: number rows episimdata). pred_susceptibles Integer flag (0 1) determining whether adjust Re susceptible population. gamma Discount factor calculating expected reward.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_est_D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection of epidemic outcomes and calculates expected reward using Deaths only — Epi_pred_est_D","text":"Numeric value representing expected reward prediction window.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_est_D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection of epidemic outcomes and calculates expected reward using Deaths only — Epi_pred_est_D","text":"function simulates epidemic spread using gamma distribution model generation time mortality time. applies interventions, updates effective reproduction number (Re), predicts deaths via Poisson process. expected reward calculated based reward_fun_wd.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_est_D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projection of epidemic outcomes and calculates expected reward using Deaths only — Epi_pred_est_D","text":"","code":"# Example usage (assuming required inputs are available): result <- Epi_pred_est_D(episimdata, epi_par, noise_par, actions, \"influenza\",                          pred_days = 14, r_dir = 1, kk = 50, jj = 2, N = 1e6) #> Error in eval(expr, envir, enclos): object 'epi_par' not found"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection of epidemic outcomes and calculating expected reward — Epi_pred_wd","title":"Projection of epidemic outcomes and calculating expected reward — Epi_pred_wd","text":"function projects epidemic progression based given parameters, simulating infections deaths prediction window. incorporates intervention effects computes expected reward values.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection of epidemic outcomes and calculating expected reward — Epi_pred_wd","text":"","code":"Epi_pred_wd(   episimdata,   episettings,   epi_par,   noise_par,   actions,   pathogen,   pred_days,   r_dir,   kk,   jj,   N,   ndays = nrow(episimdata),   pred_susceptibles = 0,   gamma = 0.95 )"},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection of epidemic outcomes and calculating expected reward — Epi_pred_wd","text":"episimdata data frame containing simulation data. include columns \"C\" (cases), \"\" (infected individuals), \"Re\" (effective reproduction number), \"S\" (susceptible individuals), \"Deaths\", \"Lambda\". epi_par data frame containing epidemiological parameters various pathogens. following columns: \"R0\" (basic reproduction number), \"gen_time\" (generation time), \"gen_time_var\" (variance generation time), \"CFR\" (case fatality rate), \"mortality_mean\", \"mortality_var\". noise_par placeholder surveillance noise parameters. used projections. actions data frame containing control actions. Column 2 expected modify effective reproduction number (\"Re\"). pathogen integer specifying pathogen extract corresponding epidemiological parameters. pred_days integer specifying number days predict ahead. r_dir integer specifying reproduction number adjustments: 1 direct Re. 2 logistic adjustments. 0 using generation time distribution. kk integer indicating starting day prediction within simulation. jj integer specifying row index actions use control effects. N numeric value representing total population size. ndays integer specifying total number days simulation. Defaults number rows episimdata. pred_susceptibles binary (0 1) indicating whether update number susceptibles simulation. Defaults 0. gamma numeric value 0 1 representing discount factor future rewards. Defaults 0.95. Smaller values prioritise immediate rewards longer term rewards.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection of epidemic outcomes and calculating expected reward — Epi_pred_wd","text":"numeric value representing expected discounted reward prediction window.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_wd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection of epidemic outcomes and calculating expected reward — Epi_pred_wd","text":"function simulates epidemic using specified parameters computes rewards day within prediction window. Rewards calculated using reward_fun_wd function discounted exponentially using discount factor gamma.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/Epi_pred_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projection of epidemic outcomes and calculating expected reward — Epi_pred_wd","text":"","code":"# Example epidemiological data episimdata <- data.frame(R0est = c(1.5, 1.6), C = c(0, 10), Re = c(NA, NA), S = c(1000, 990), Deaths = c(0, 1)) epi_par <- data.frame(   R0 = c(2.5), gen_time = c(5), gen_time_var = c(1),   CFR = c(0.02), mortality_mean = c(14), mortality_var = c(2) ) actions <- data.frame(action_effect = c(0.9, 0.8)) Epi_pred_wd(   episimdata = episimdata, epi_par = epi_par, noise_par = NULL,   actions = actions, pathogen = \"pathogen1\", pred_days = 10,   r_dir = 1, kk = 2, jj = 1, N = 1000, ndays = 20 ) #> Error in Epi_pred_wd(episimdata = episimdata, epi_par = epi_par, noise_par = NULL,     actions = actions, pathogen = \"pathogen1\", pred_days = 10,     r_dir = 1, kk = 2, jj = 1, N = 1000, ndays = 20): argument \"episettings\" is missing, with no default"},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_epiestim.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Reproduction Number (R) and Reduction Coefficient Using EpiEstim — R_epiestim","title":"Estimate Reproduction Number (R) and Reduction Coefficient Using EpiEstim — R_epiestim","text":"Estimates effective reproduction number (`R_est`) temporary reduction coefficient (`R_coeff_tmp`) based epidemic simulation data, using EpiEstim package.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_epiestim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Reproduction Number (R) and Reduction Coefficient Using EpiEstim — R_epiestim","text":"","code":"R_epiestim(episimdata, Ygen, ii, R_est_wind = 5, r_dir = 0)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_epiestim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Reproduction Number (R) and Reduction Coefficient Using EpiEstim — R_epiestim","text":"episimdata data frame containing epidemic simulation data. must include following columns: - `C`: Number cases. - `Lambda_C`: Total infectiousness (typically computed past cases). - `R_coeff`: Reduction coefficient representing effect interventions transmission. Ygen numeric vector representing generation time distribution. ii integer indicating current time step simulation. R_est_wind integer specifying window size used estimating `R` (default 5). r_dir integer indicating reduction coefficient averaged: - `1`, uses simple mean estimation window. - Otherwise, uses weighted average based generation distribution.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_epiestim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Reproduction Number (R) and Reduction Coefficient Using EpiEstim — R_epiestim","text":"list two elements:   - `R_est`: estimated reproduction number.   - `R_coeff_tmp`: temporary estimate reduction coefficient.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_estim.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Reproduction Number (R) and the Reduction Coefficient — R_estim","title":"Estimate Reproduction Number (R) and the Reduction Coefficient — R_estim","text":"function estimates reproduction number (`R_est`) associated coefficient (`R_coeff_tmp`) based epidemic ata.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_estim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Reproduction Number (R) and the Reduction Coefficient — R_estim","text":"","code":"R_estim(episimdata, Ygen, ii, R_est_wind = 5, r_dir = 0)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_estim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Reproduction Number (R) and the Reduction Coefficient — R_estim","text":"episimdata data frame containing epidemic simulation data columns `C`, `Lambda_C`, `R_coeff` containing, cases, total infectiousness (computed form cases), reduction R policy, respectively. Ygen numeric vector representing generation time distribution. ii integer specifying current time step simulation. R_est_wind integer (default = 5) defining window size R estimation. r_dir integer specifying reproduction number adjustments.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/R_estim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Reproduction Number (R) and the Reduction Coefficient — R_estim","text":"list containing:   - `R_est`: Estimated reproduction number.   - `R_coeff_tmp`: Estimated reduction coefficient `R0`.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Transition Function for new variant prevalence. — delta","title":"Logistic Transition Function for new variant prevalence. — delta","text":"Used COVID-19 Delta/Alpha variants example can used model generic new variant becomes prevalent old one time.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Transition Function for new variant prevalence. — delta","text":"","code":"delta(x, scale, start)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Transition Function for new variant prevalence. — delta","text":"x Numeric vector representing time. scale Scaling factor controlling rate transition. start time point new variant appears.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logistic Transition Function for new variant prevalence. — delta","text":"numeric vector representing transition effect new variant prevalence, ranging 0 1.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/delta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logistic Transition Function for new variant prevalence. — delta","text":"function applies hyperbolic tangent transformation model new transmissible pathogen variant (e.g. COVID-19 delta becoming prevalent alpha). output shifted scaled range 0 1.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logistic Transition Function for new variant prevalence. — delta","text":"","code":"x <- seq(0, 100, by = 1) scale <- 10 start <- 50 delta_effect <- delta(x, scale, start) plot(x, delta_effect, type = \"l\", main = \"Logistic Transition Over Time\")"},{"path":"https://sandorberegi.github.io/EpiControl/reference/epicontrol.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Epidemiological Simulations with Control — epicontrol","title":"Run Epidemiological Simulations with Control — epicontrol","text":"function runs multiple ensemble simulations epidemiological modelling, incorporating noise parameters, estimated reproduction numbers, intervention actions. supports parallel computation efficiency.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/epicontrol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Epidemiological Simulations with Control — epicontrol","text":"","code":"epicontrol(episim_data_ens, episettings)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/epicontrol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Epidemiological Simulations with Control — epicontrol","text":"episim_data_ens list data frames containing initial epidemiological simulation data ensemble member. episettings list settings controlling simulation, including: - `sim_function`: Function run single epidemiological simulation. - `reward_function`: Function calculate rewards control process. - `R_estimator`: Function estimate reproduction number. - `noise_par`: Parameters related noise simulation. - `epi_par`: Epidemiological parameters. - `actions`: Possible intervention actions. - `sim_settings`: list simulation-specific settings. Please refer sim_function's documentation list required parameters - `parallel`: Logical, whether run simulations parallel. - `cl`: Cluster object parallel computation `parallel = TRUE`.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/epicontrol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Epidemiological Simulations with Control — epicontrol","text":"list simulation results ensemble member.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/logistic_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Function for Transition Between Reproduction Numbers — logistic_function","title":"Logistic Function for Transition Between Reproduction Numbers — logistic_function","text":"function models smooth transition two reproduction numbers (\\(R_0\\) \\(R_1\\)) time using logistic curve.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/logistic_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Function for Transition Between Reproduction Numbers — logistic_function","text":"","code":"logistic_function(t, R0, R1, r, t0)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/logistic_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Function for Transition Between Reproduction Numbers — logistic_function","text":"t numeric value vector representing time point(s) calculate reproduction number. R0 numeric value representing initial reproduction number (\\(R_0\\)). R1 numeric value representing final reproduction number (\\(R_1\\)). r numeric value representing growth rate steepness logistic transition. t0 numeric value representing midpoint transition reproduction number halfway \\(R_0\\) \\(R_1\\).","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/logistic_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logistic Function for Transition Between Reproduction Numbers — logistic_function","text":"numeric value vector representing reproduction number time point t.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/logistic_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logistic Function for Transition Between Reproduction Numbers — logistic_function","text":"function computes reproduction number using logistic equation: $$R(t) = \\frac{R_1 - R_0}{1 + \\exp(-r \\cdot (t - t_0))} + R_0$$ models smooth, sigmoidal transition \\(R_0\\) \\(R_1\\) time.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/logistic_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logistic Function for Transition Between Reproduction Numbers — logistic_function","text":"","code":"# Transition from R0 = 2.5 to R1 = 1.0 over time times <- seq(0, 10, by = 0.1) reproduction_numbers <- logistic_function(times, R0 = 2.5, R1 = 1.0, r = 0.5, t0 = 5) plot(times, reproduction_numbers, type = \"l\", main = \"Logistic Transition of Reproduction Number\")"},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Reward for Epidemic Simulation — reward_fun","title":"Compute the Reward for Epidemic Simulation — reward_fun","text":"function calculates reward based case prediction errors, reproduction number deviation, intervention costs.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Reward for Epidemic Simulation — reward_fun","text":"","code":"reward_fun(episimdata, episettings, actions, ii, jj)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Reward for Epidemic Simulation — reward_fun","text":"episimdata data frame containing epidemic simulation data. actions matrix containing intervention actions, column specifying cost non-pharmaceutical interventions (NPI). ii current time step simulation. jj index action scenario evaluated. alpha penalty factor case prediction errors. ovp penalty value applied predicted cases exceed certain threshold. C_target target number cases given day. C_target_pen case threshold penalty `ovp` applied. R_target target effective reproduction number.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Reward for Epidemic Simulation — reward_fun","text":"numeric value representing reward given time step.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Reward for Epidemic Simulation — reward_fun","text":"function computes absolute error predicted target cases (`C_err_pred`) deviation reproduction number (`R_err_pred`). predicted cases exceed `C_target_pen`, additional penalty (`ovp`) applied. final reward incorporates penalties along intervention cost.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Reward function for Model Predictive Optimal Control — reward_fun_wd","title":"Calculate Reward function for Model Predictive Optimal Control — reward_fun_wd","text":"function computes reward value based epidemiological simulation data, penalties exceeding target thresholds, cost non-pharmaceutical interventions (NPIs).","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Reward function for Model Predictive Optimal Control — reward_fun_wd","text":"","code":"reward_fun_wd(episimdata, episettings, actions, ii, jj)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Reward function for Model Predictive Optimal Control — reward_fun_wd","text":"episimdata data frame containing epidemiological simulation data. function expects specific columns: \"C\" cases, \"Re\" reproduction number, \"Deaths\". actions data frame containing costs non-pharmaceutical interventions (NPIs). expects column named \"cost_of_NPI\". ii integer specifying row index episimdata use reward calculation. jj integer specifying row index actions use cost retrieval. alpha numeric value representing weight applied case error reward calculation. alpha_d numeric value representing weight applied death error reward calculation. ovp numeric value penalty applied cases exceed C_target_pen. dovp numeric value penalty applied deaths exceed D_target_pen. C_target numeric target number cases. C_target_pen numeric threshold penalty cases. D_target numeric target number deaths. D_target_pen numeric threshold penalty deaths.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Reward function for Model Predictive Optimal Control — reward_fun_wd","text":"numeric value representing calculated reward.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun_wd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Reward function for Model Predictive Optimal Control — reward_fun_wd","text":"reward computed : $$reward = -\\alpha * |C - C_{target}| - penalty_{C} - NPI_{cost} - \\alpha_d * |Deaths - D_{target}| - penalty_{D}$$ : \\(penalty_{C}\\) applied cases exceed C_target_pen. \\(penalty_{D}\\) applied deaths exceed D_target_pen. NPI_{cost} retrieved actions data frame based index jj.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/reward_fun_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Reward function for Model Predictive Optimal Control — reward_fun_wd","text":"","code":"reward_fun_wd(episimdata, alpha = 0.5, alpha_d = 0.7, ovp = 50, dovp = 30,               C_target = 120, C_target_pen = 140, D_target = 7, D_target_pen = 12,               actions = actions, ii = 1, jj = 2) #> Error in reward_fun_wd(episimdata, alpha = 0.5, alpha_d = 0.7, ovp = 50,     dovp = 30, C_target = 120, C_target_pen = 140, D_target = 7,     D_target_pen = 12, actions = actions, ii = 1, jj = 2): unused arguments (alpha = 0.5, alpha_d = 0.7, ovp = 50, dovp = 30, C_target = 120, C_target_pen = 140, D_target = 7, D_target_pen = 12)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/vac.html","id":null,"dir":"Reference","previous_headings":"","what":"Vaccination Effect Over Time — vac","title":"Vaccination Effect Over Time — vac","text":"function models effect vaccination time using scaled hyperbolic tangent function simulate proportion vaccinated individuals.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/vac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vaccination Effect Over Time — vac","text":"","code":"vac(x, maxv, scale, start)"},{"path":"https://sandorberegi.github.io/EpiControl/reference/vac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vaccination Effect Over Time — vac","text":"x Numeric vector representing time. maxv Maximum vaccination effect uptake level. scale Scaling factor controlling rate change. start time point vaccination starts take effect.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/vac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vaccination Effect Over Time — vac","text":"numeric vector representing vaccination effect, ensuring non-negative values.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/vac.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vaccination Effect Over Time — vac","text":"function applies hyperbolic tangent transformation model vaccination uptake. result capped minimum zero using `pmax()` prevent negative values.","code":""},{"path":"https://sandorberegi.github.io/EpiControl/reference/vac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vaccination Effect Over Time — vac","text":"","code":"x <- seq(0, 100, by = 1) maxv <- 0.8 scale <- 10 start <- 50 vac_effect <- vac(x, maxv, scale, start) plot(x, vac_effect, type = \"l\", main = \"Vaccination Effect Over Time\")"}]
